generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model BookStand {
  id                      Int      @id @default(autoincrement())
  company_name            String
  contact_name            String
  email                   String
  phone                   String
  stand_type              String
  payment_method          String
  additional_requirements String?  @db.Text
  status                  String   @default("pending")
  reference_id            String   @unique
  admin_confirmed         Boolean  @default(false)
  created_at              DateTime @default(now())
  updated_at              DateTime @updatedAt

  @@map("book_stands")
}

model Event {
  id          String   @id
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime

  @@map("event")
}

model Registration {
  id                    Int                @id @default(autoincrement())
  organization          String?
  email                 String
  phone                 String?
  country               String?
  interests             String?            @db.LongText
  created_at            DateTime           @default(now())
  first_name            String
  job_title             String?
  last_name             String
  newsletter_subscribed Boolean            @default(false)
  registration_id       String             @unique(map: "Registration_registration_id_key")
  special_requirements  String?            @db.Text
  terms_accepted        Boolean
  ticket_type           String
  user_id               String?
  payment_status        String             @default("pending")
  paymentReferences     PaymentReference[]

  @@map("registration")
}

model PaymentReference {
  id              Int          @id @default(autoincrement())
  reference       String       @unique
  registration_id String
  amount          Decimal      @db.Decimal(10, 2)
  status          String       @default("pending")
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt
  currency        String       @default("NGN")
  metadata        String?      @db.LongText
  registration    Registration @relation(fields: [registration_id], references: [registration_id])

  @@index([registration_id], map: "payment_reference_registration_id_fkey")
  @@map("payment_reference")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique(map: "User_email_key")
  firstName String
  lastName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  password  String

  @@map("user")
}

model Book {
  id              Int             @id @default(autoincrement())
  title           String
  author          String
  price           Decimal
  image           String?
  category        String
  description     String
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
  donation_items  DonationItem[]
  @@map("books")
}

model Donor {
  id            Int             @id @default(autoincrement())
  name          String
  email         String
  phone         String
  address       String?
  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt
  donations     DonationRecord[]
}

model DonationRecord {
  id            Int             @id @default(autoincrement())
  donor_id      Int
  donor         Donor           @relation(fields: [donor_id], references: [id])
  amount        Decimal
  reference     String          @unique
  status        String          @default("pending") // pending, successful, failed
  paystack_ref  String?         // Paystack reference
  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt
  items         DonationItem[]
}

model DonationItem {
  id              Int             @id @default(autoincrement())
  donation_id     Int
  donation        DonationRecord  @relation(fields: [donation_id], references: [id])
  book_id         Int
  book            Book            @relation(fields: [book_id], references: [id])
  quantity        Int
  price           Decimal
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
}
